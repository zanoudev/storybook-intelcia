{
  "version": 3,
  "sources": ["browser-external:path", "../../../../../loader-utils/lib/isUrlRequest.js", "../../../../../loader-utils/lib/urlToRequest.js", "../../../../../loader-utils/lib/hash/wasm-hash.js", "../../../../../loader-utils/lib/hash/xxhash64.js", "../../../../../loader-utils/lib/hash/BatchedHash.js", "../../../../../loader-utils/lib/hash/md4.js", "browser-external:crypto", "../../../../../loader-utils/lib/hash/BulkUpdateDecorator.js", "../../../../../loader-utils/lib/getHashDigest.js", "../../../../../loader-utils/lib/interpolateName.js", "../../../../../loader-utils/lib/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "\"use strict\";\n\nconst path = require(\"path\");\n\nfunction isUrlRequest(url) {\n  // An URL is not an request if\n\n  // 1. Allow `data URI`\n  if (/^data:/i.test(url)) {\n    return true;\n  }\n\n  // 2. It's an absolute url and it is not `windows` path like `C:\\dir\\file`\n  if (/^[a-z][a-z0-9+.-]*:/i.test(url) && !path.win32.isAbsolute(url)) {\n    return false;\n  }\n\n  // 3. It's a protocol-relative\n  if (/^\\/\\//.test(url)) {\n    return false;\n  }\n\n  // 4. It's some kind of url for a template\n  if (/^#/.test(url)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = isUrlRequest;\n", "\"use strict\";\n\n// we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash\nconst matchNativeWin32Path = /^[A-Z]:[/\\\\]|^\\\\\\\\/i;\n\nfunction urlToRequest(url, root) {\n  // Do not rewrite an empty url\n  if (url === \"\") {\n    return \"\";\n  }\n\n  const moduleRequestRegex = /^[^?]*~/;\n  let request;\n\n  if (matchNativeWin32Path.test(url)) {\n    // absolute windows path, keep it\n    request = url;\n  } else if (root !== undefined && root !== false && /^\\//.test(url)) {\n    // if root is set and the url is root-relative\n    switch (typeof root) {\n      // 1. root is a string: root is prefixed to the url\n      case \"string\":\n        // special case: `~` roots convert to module request\n        if (moduleRequestRegex.test(root)) {\n          request = root.replace(/([^~/])$/, \"$1/\") + url.slice(1);\n        } else {\n          request = root + url;\n        }\n        break;\n      // 2. root is `true`: absolute paths are allowed\n      //    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`\n      case \"boolean\":\n        request = url;\n        break;\n      default:\n        throw new Error(\n          \"Unexpected parameters to loader-utils 'urlToRequest': url = \" +\n            url +\n            \", root = \" +\n            root +\n            \".\"\n        );\n    }\n  } else if (/^\\.\\.?\\//.test(url)) {\n    // A relative url stays\n    request = url;\n  } else {\n    // every other url is threaded like a relative url\n    request = \"./\" + url;\n  }\n\n  // A `~` makes the url an module\n  if (moduleRequestRegex.test(request)) {\n    request = request.replace(moduleRequestRegex, \"\");\n  }\n\n  return request;\n}\n\nmodule.exports = urlToRequest;\n", "/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n// 65536 is the size of a wasm memory page\n// 64 is the maximum chunk size for every possible wasm hash implementation\n// 4 is the maximum number of bytes per char for string encoding (max is utf-8)\n// ~3 makes sure that it's always a block of 4 chars, so avoid partially encoded bytes for base64\nconst MAX_SHORT_STRING = Math.floor((65536 - 64) / 4) & ~3;\n\nclass WasmHash {\n  /**\n   * @param {WebAssembly.Instance} instance wasm instance\n   * @param {WebAssembly.Instance[]} instancesPool pool of instances\n   * @param {number} chunkSize size of data chunks passed to wasm\n   * @param {number} digestSize size of digest returned by wasm\n   */\n  constructor(instance, instancesPool, chunkSize, digestSize) {\n    const exports = /** @type {any} */ (instance.exports);\n\n    exports.init();\n\n    this.exports = exports;\n    this.mem = Buffer.from(exports.memory.buffer, 0, 65536);\n    this.buffered = 0;\n    this.instancesPool = instancesPool;\n    this.chunkSize = chunkSize;\n    this.digestSize = digestSize;\n  }\n\n  reset() {\n    this.buffered = 0;\n    this.exports.init();\n  }\n\n  /**\n   * @param {Buffer | string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {this} itself\n   */\n  update(data, encoding) {\n    if (typeof data === \"string\") {\n      while (data.length > MAX_SHORT_STRING) {\n        this._updateWithShortString(data.slice(0, MAX_SHORT_STRING), encoding);\n        data = data.slice(MAX_SHORT_STRING);\n      }\n\n      this._updateWithShortString(data, encoding);\n\n      return this;\n    }\n\n    this._updateWithBuffer(data);\n\n    return this;\n  }\n\n  /**\n   * @param {string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {void}\n   */\n  _updateWithShortString(data, encoding) {\n    const { exports, buffered, mem, chunkSize } = this;\n\n    let endPos;\n\n    if (data.length < 70) {\n      if (!encoding || encoding === \"utf-8\" || encoding === \"utf8\") {\n        endPos = buffered;\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          if (cc < 0x80) {\n            mem[endPos++] = cc;\n          } else if (cc < 0x800) {\n            mem[endPos] = (cc >> 6) | 0xc0;\n            mem[endPos + 1] = (cc & 0x3f) | 0x80;\n            endPos += 2;\n          } else {\n            // bail-out for weird chars\n            endPos += mem.write(data.slice(i), endPos, encoding);\n            break;\n          }\n        }\n      } else if (encoding === \"latin1\") {\n        endPos = buffered;\n\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          mem[endPos++] = cc;\n        }\n      } else {\n        endPos = buffered + mem.write(data, buffered, encoding);\n      }\n    } else {\n      endPos = buffered + mem.write(data, buffered, encoding);\n    }\n\n    if (endPos < chunkSize) {\n      this.buffered = endPos;\n    } else {\n      const l = endPos & ~(this.chunkSize - 1);\n\n      exports.update(l);\n\n      const newBuffered = endPos - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        mem.copyWithin(0, l, endPos);\n      }\n    }\n  }\n\n  /**\n   * @param {Buffer} data data\n   * @returns {void}\n   */\n  _updateWithBuffer(data) {\n    const { exports, buffered, mem } = this;\n    const length = data.length;\n\n    if (buffered + length < this.chunkSize) {\n      data.copy(mem, buffered, 0, length);\n\n      this.buffered += length;\n    } else {\n      const l = (buffered + length) & ~(this.chunkSize - 1);\n\n      if (l > 65536) {\n        let i = 65536 - buffered;\n\n        data.copy(mem, buffered, 0, i);\n        exports.update(65536);\n\n        const stop = l - buffered - 65536;\n\n        while (i < stop) {\n          data.copy(mem, 0, i, i + 65536);\n          exports.update(65536);\n          i += 65536;\n        }\n\n        data.copy(mem, 0, i, l - buffered);\n\n        exports.update(l - buffered - i);\n      } else {\n        data.copy(mem, buffered, 0, l - buffered);\n\n        exports.update(l);\n      }\n\n      const newBuffered = length + buffered - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        data.copy(mem, 0, length - newBuffered, length);\n      }\n    }\n  }\n\n  digest(type) {\n    const { exports, buffered, mem, digestSize } = this;\n\n    exports.final(buffered);\n\n    this.instancesPool.push(this);\n\n    const hex = mem.toString(\"latin1\", 0, digestSize);\n\n    if (type === \"hex\") {\n      return hex;\n    }\n\n    if (type === \"binary\" || !type) {\n      return Buffer.from(hex, \"hex\");\n    }\n\n    return Buffer.from(hex, \"hex\").toString(type);\n  }\n}\n\nconst create = (wasmModule, instancesPool, chunkSize, digestSize) => {\n  if (instancesPool.length > 0) {\n    const old = instancesPool.pop();\n\n    old.reset();\n\n    return old;\n  } else {\n    return new WasmHash(\n      new WebAssembly.Instance(wasmModule),\n      instancesPool,\n      chunkSize,\n      digestSize\n    );\n  }\n};\n\nmodule.exports = create;\nmodule.exports.MAX_SHORT_STRING = MAX_SHORT_STRING;\n", "/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst create = require(\"./wasm-hash\");\n\n//#region wasm code: xxhash64 (../../../assembly/hash/xxhash64.asm.ts) --initialMemory 1\nconst xxhash64 = new WebAssembly.Module(\n  Buffer.from(\n    // 1173 bytes\n    \"AGFzbQEAAAABCAJgAX8AYAAAAwQDAQAABQMBAAEGGgV+AUIAC34BQgALfgFCAAt+AUIAC34BQgALByIEBGluaXQAAAZ1cGRhdGUAAQVmaW5hbAACBm1lbW9yeQIACrUIAzAAQtbrgu7q/Yn14AAkAELP1tO+0ser2UIkAUIAJAJC+erQ0OfJoeThACQDQgAkBAvUAQIBfwR+IABFBEAPCyMEIACtfCQEIwAhAiMBIQMjAiEEIwMhBQNAIAIgASkDAELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiECIAMgASkDCELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiEDIAQgASkDEELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiEEIAUgASkDGELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiEFIAAgAUEgaiIBSw0ACyACJAAgAyQBIAQkAiAFJAMLqwYCAX8EfiMEQgBSBH4jACICQgGJIwEiA0IHiXwjAiIEQgyJfCMDIgVCEol8IAJCz9bTvtLHq9lCfkIfiUKHla+vmLbem55/foVCh5Wvr5i23puef35CnaO16oOxjYr6AH0gA0LP1tO+0ser2UJ+Qh+JQoeVr6+Ytt6bnn9+hUKHla+vmLbem55/fkKdo7Xqg7GNivoAfSAEQs/W077Sx6vZQn5CH4lCh5Wvr5i23puef36FQoeVr6+Ytt6bnn9+Qp2jteqDsY2K+gB9IAVCz9bTvtLHq9lCfkIfiUKHla+vmLbem55/foVCh5Wvr5i23puef35CnaO16oOxjYr6AH0FQsXP2bLx5brqJwsjBCAArXx8IQIDQCABQQhqIABNBEAgAiABKQMAQs/W077Sx6vZQn5CH4lCh5Wvr5i23puef36FQhuJQoeVr6+Ytt6bnn9+Qp2jteqDsY2K+gB9IQIgAUEIaiEBDAELCyABQQRqIABNBEACfyACIAE1AgBCh5Wvr5i23puef36FQheJQs/W077Sx6vZQn5C+fPd8Zn2masWfCECIAFBBGoLIQELA0AgACABRwRAIAIgATEAAELFz9my8eW66id+hUILiUKHla+vmLbem55/fiECIAFBAWohAQwBCwtBACACIAJCIYiFQs/W077Sx6vZQn4iAiACQh2IhUL5893xmfaZqxZ+IgIgAkIgiIUiAkIgiCIDQv//A4NCIIYgA0KAgPz/D4NCEIiEIgNC/4GAgPAfg0IQhiADQoD+g4CA4D+DQgiIhCIDQo+AvIDwgcAHg0IIhiADQvCBwIeAnoD4AINCBIiEIgNChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IANCsODAgYOGjJgwhHw3AwBBCCACQv////8PgyICQv//A4NCIIYgAkKAgPz/D4NCEIiEIgJC/4GAgPAfg0IQhiACQoD+g4CA4D+DQgiIhCICQo+AvIDwgcAHg0IIhiACQvCBwIeAnoD4AINCBIiEIgJChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IAJCsODAgYOGjJgwhHw3AwAL\",\n    \"base64\"\n  )\n);\n//#endregion\n\nmodule.exports = create.bind(null, xxhash64, [], 32, 16);\n", "const MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\n\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (\n        typeof data === \"string\" &&\n        inputEncoding === this.encoding &&\n        this.string.length + data.length < MAX_SHORT_STRING\n      ) {\n        this.string += data;\n\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === \"string\") {\n      if (\n        data.length < MAX_SHORT_STRING &&\n        // base64 encoding is not valid since it may contain padding chars\n        (!inputEncoding || !inputEncoding.startsWith(\"ba\"))\n      ) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n}\n\nmodule.exports = BatchedHash;\n", "/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst create = require(\"./wasm-hash\");\n\n//#region wasm code: md4 (../../../assembly/hash/md4.asm.ts) --initialMemory 1\nconst md4 = new WebAssembly.Module(\n  Buffer.from(\n    // 2150 bytes\n    \"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\",\n    \"base64\"\n  )\n);\n//#endregion\n\nmodule.exports = create.bind(null, md4, [], 64, 32);\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "const BULK_SIZE = 2000;\n\n// We are using an object instead of a Map as this will stay static during the runtime\n// so access to it can be optimized by v8\nconst digestCaches = {};\n\nclass BulkUpdateDecorator {\n  /**\n   * @param {Hash | function(): Hash} hashOrFactory function to create a hash\n   * @param {string=} hashKey key for caching\n   */\n  constructor(hashOrFactory, hashKey) {\n    this.hashKey = hashKey;\n\n    if (typeof hashOrFactory === \"function\") {\n      this.hashFactory = hashOrFactory;\n      this.hash = undefined;\n    } else {\n      this.hashFactory = undefined;\n      this.hash = hashOrFactory;\n    }\n\n    this.buffer = \"\";\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (\n      inputEncoding !== undefined ||\n      typeof data !== \"string\" ||\n      data.length > BULK_SIZE\n    ) {\n      if (this.hash === undefined) {\n        this.hash = this.hashFactory();\n      }\n\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n\n      this.hash.update(data, inputEncoding);\n    } else {\n      this.buffer += data;\n\n      if (this.buffer.length > BULK_SIZE) {\n        if (this.hash === undefined) {\n          this.hash = this.hashFactory();\n        }\n\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    let digestCache;\n\n    const buffer = this.buffer;\n\n    if (this.hash === undefined) {\n      // short data for hash, we can use caching\n      const cacheKey = `${this.hashKey}-${encoding}`;\n\n      digestCache = digestCaches[cacheKey];\n\n      if (digestCache === undefined) {\n        digestCache = digestCaches[cacheKey] = new Map();\n      }\n\n      const cacheEntry = digestCache.get(buffer);\n\n      if (cacheEntry !== undefined) {\n        return cacheEntry;\n      }\n\n      this.hash = this.hashFactory();\n    }\n\n    if (buffer.length > 0) {\n      this.hash.update(buffer);\n    }\n\n    const digestResult = this.hash.digest(encoding);\n\n    if (digestCache !== undefined) {\n      digestCache.set(buffer, digestResult);\n    }\n\n    return digestResult;\n  }\n}\n\nmodule.exports = BulkUpdateDecorator;\n", "\"use strict\";\n\nconst baseEncodeTables = {\n  26: \"abcdefghijklmnopqrstuvwxyz\",\n  32: \"123456789abcdefghjkmnpqrstuvwxyz\", // no 0lio\n  36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n  49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no lIO\n  52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\", // no 0lIO\n  62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\",\n};\n\n/**\n * @param {Uint32Array} uint32Array Treated as a long base-0x100000000 number, little endian\n * @param {number} divisor The divisor\n * @return {number} Modulo (remainder) of the division\n */\nfunction divmod32(uint32Array, divisor) {\n  let carry = 0;\n  for (let i = uint32Array.length - 1; i >= 0; i--) {\n    const value = carry * 0x100000000 + uint32Array[i];\n    carry = value % divisor;\n    uint32Array[i] = Math.floor(value / divisor);\n  }\n  return carry;\n}\n\nfunction encodeBufferToBase(buffer, base, length) {\n  const encodeTable = baseEncodeTables[base];\n\n  if (!encodeTable) {\n    throw new Error(\"Unknown encoding base\" + base);\n  }\n\n  // Input bits are only enough to generate this many characters\n  const limit = Math.ceil((buffer.length * 8) / Math.log2(base));\n  length = Math.min(length, limit);\n\n  // Most of the crypto digests (if not all) has length a multiple of 4 bytes.\n  // Fewer numbers in the array means faster math.\n  const uint32Array = new Uint32Array(Math.ceil(buffer.length / 4));\n\n  // Make sure the input buffer data is copied and is not mutated by reference.\n  // divmod32() would corrupt the BulkUpdateDecorator cache otherwise.\n  buffer.copy(Buffer.from(uint32Array.buffer));\n\n  let output = \"\";\n\n  for (let i = 0; i < length; i++) {\n    output = encodeTable[divmod32(uint32Array, base)] + output;\n  }\n\n  return output;\n}\n\nlet crypto = undefined;\nlet createXXHash64 = undefined;\nlet createMd4 = undefined;\nlet BatchedHash = undefined;\nlet BulkUpdateDecorator = undefined;\n\nfunction getHashDigest(buffer, algorithm, digestType, maxLength) {\n  algorithm = algorithm || \"xxhash64\";\n  maxLength = maxLength || 9999;\n\n  let hash;\n\n  if (algorithm === \"xxhash64\") {\n    if (createXXHash64 === undefined) {\n      createXXHash64 = require(\"./hash/xxhash64\");\n\n      if (BatchedHash === undefined) {\n        BatchedHash = require(\"./hash/BatchedHash\");\n      }\n    }\n\n    hash = new BatchedHash(createXXHash64());\n  } else if (algorithm === \"md4\") {\n    if (createMd4 === undefined) {\n      createMd4 = require(\"./hash/md4\");\n\n      if (BatchedHash === undefined) {\n        BatchedHash = require(\"./hash/BatchedHash\");\n      }\n    }\n\n    hash = new BatchedHash(createMd4());\n  } else if (algorithm === \"native-md4\") {\n    if (typeof crypto === \"undefined\") {\n      crypto = require(\"crypto\");\n\n      if (BulkUpdateDecorator === undefined) {\n        BulkUpdateDecorator = require(\"./hash/BulkUpdateDecorator\");\n      }\n    }\n\n    hash = new BulkUpdateDecorator(() => crypto.createHash(\"md4\"), \"md4\");\n  } else {\n    if (typeof crypto === \"undefined\") {\n      crypto = require(\"crypto\");\n\n      if (BulkUpdateDecorator === undefined) {\n        BulkUpdateDecorator = require(\"./hash/BulkUpdateDecorator\");\n      }\n    }\n\n    hash = new BulkUpdateDecorator(\n      () => crypto.createHash(algorithm),\n      algorithm\n    );\n  }\n\n  hash.update(buffer);\n\n  if (\n    digestType === \"base26\" ||\n    digestType === \"base32\" ||\n    digestType === \"base36\" ||\n    digestType === \"base49\" ||\n    digestType === \"base52\" ||\n    digestType === \"base58\" ||\n    digestType === \"base62\" ||\n    digestType === \"base64safe\"\n  ) {\n    return encodeBufferToBase(\n      hash.digest(),\n      digestType === \"base64safe\" ? 64 : digestType.substr(4),\n      maxLength\n    );\n  }\n\n  return hash.digest(digestType || \"hex\").substr(0, maxLength);\n}\n\nmodule.exports = getHashDigest;\n", "\"use strict\";\n\nconst path = require(\"path\");\nconst getHashDigest = require(\"./getHashDigest\");\n\nfunction interpolateName(loaderContext, name, options = {}) {\n  let filename;\n\n  const hasQuery =\n    loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n\n  if (typeof name === \"function\") {\n    filename = name(\n      loaderContext.resourcePath,\n      hasQuery ? loaderContext.resourceQuery : undefined\n    );\n  } else {\n    filename = name || \"[hash].[ext]\";\n  }\n\n  const context = options.context;\n  const content = options.content;\n  const regExp = options.regExp;\n\n  let ext = \"bin\";\n  let basename = \"file\";\n  let directory = \"\";\n  let folder = \"\";\n  let query = \"\";\n\n  if (loaderContext.resourcePath) {\n    const parsed = path.parse(loaderContext.resourcePath);\n    let resourcePath = loaderContext.resourcePath;\n\n    if (parsed.ext) {\n      ext = parsed.ext.substr(1);\n    }\n\n    if (parsed.dir) {\n      basename = parsed.name;\n      resourcePath = parsed.dir + path.sep;\n    }\n\n    if (typeof context !== \"undefined\") {\n      directory = path\n        .relative(context, resourcePath + \"_\")\n        .replace(/\\\\/g, \"/\")\n        .replace(/\\.\\.(\\/)?/g, \"_$1\");\n      directory = directory.substr(0, directory.length - 1);\n    } else {\n      directory = resourcePath.replace(/\\\\/g, \"/\").replace(/\\.\\.(\\/)?/g, \"_$1\");\n    }\n\n    if (directory.length <= 1) {\n      directory = \"\";\n    } else {\n      // directory.length > 1\n      folder = path.basename(directory);\n    }\n  }\n\n  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n    query = loaderContext.resourceQuery;\n\n    const hashIdx = query.indexOf(\"#\");\n\n    if (hashIdx >= 0) {\n      query = query.substr(0, hashIdx);\n    }\n  }\n\n  let url = filename;\n\n  if (content) {\n    // Match hash template\n    url = url\n      // `hash` and `contenthash` are same in `loader-utils` context\n      // let's keep `hash` for backward compatibility\n      .replace(\n        /\\[(?:([^[:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*(?:safe)?))?(?::(\\d+))?\\]/gi,\n        (all, hashType, digestType, maxLength) =>\n          getHashDigest(content, hashType, digestType, parseInt(maxLength, 10))\n      );\n  }\n\n  url = url\n    .replace(/\\[ext\\]/gi, () => ext)\n    .replace(/\\[name\\]/gi, () => basename)\n    .replace(/\\[path\\]/gi, () => directory)\n    .replace(/\\[folder\\]/gi, () => folder)\n    .replace(/\\[query\\]/gi, () => query);\n\n  if (regExp && loaderContext.resourcePath) {\n    const match = loaderContext.resourcePath.match(new RegExp(regExp));\n\n    match &&\n      match.forEach((matched, i) => {\n        url = url.replace(new RegExp(\"\\\\[\" + i + \"\\\\]\", \"ig\"), matched);\n      });\n  }\n\n  if (\n    typeof loaderContext.options === \"object\" &&\n    typeof loaderContext.options.customInterpolateName === \"function\"\n  ) {\n    url = loaderContext.options.customInterpolateName.call(\n      loaderContext,\n      url,\n      name,\n      options\n    );\n  }\n\n  return url;\n}\n\nmodule.exports = interpolateName;\n", "\"use strict\";\n\nconst isUrlRequest = require(\"./isUrlRequest\");\nconst urlToRequest = require(\"./urlToRequest\");\nconst getHashDigest = require(\"./getHashDigest\");\nconst interpolateName = require(\"./interpolateName\");\n\nexports.urlToRequest = urlToRequest;\nexports.getHashDigest = getHashDigest;\nexports.interpolateName = interpolateName;\nexports.isUrlRequest = isUrlRequest;\n"],
  "mappings": "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",
  "names": ["exports"]
}
